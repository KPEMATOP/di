<?php
/**
 * Created by PhpStorm.
 * User: albertsultanov
 * Date: 27.02.17
 * Time: 1:24
 */

namespace vivace\di;


use Psr\Container\ContainerExceptionInterface;
use Psr\Container\ContainerInterface;
use Psr\Container\NotFoundExceptionInterface;

class Autowire implements ContainerInterface
{
    private $factories = [];

    /**
     * Finds an entry of the container by its identifier and returns it.
     *
     * @param string $id Identifier of the entry to look for.
     *
     * @throws NotFoundExceptionInterface  No entry was found for **this** identifier.
     * @throws ContainerExceptionInterface Error while retrieving the entry.
     *
     * @return Factory Entry.
     */
    public function get($id):Factory
    {
        if (isset($this->factories[$id])) {
            return $this->factories[$id];
        }
        return new class($id, $this->factories) extends Factory
        {
            /** @var */
            private $factories;

            public function __construct($className, &$factories)
            {
                parent::__construct($className);
                $this->factories = &$factories;
            }

            private function bind()
            {
                if (isset($this->factories) && !isset($this->factories[$this->getClassName()])) {
                    $this->factories[$this->getClassName()] = $this;
                    unset($this->factories);
                }
            }

            public function asService($value = true): Factory
            {
                $this->bind();
                return parent::asService($value); // TODO: Change the autogenerated stub
            }

            public function setArguments(array $arguments): Factory
            {
                $this->bind();
                return parent::setArguments($arguments); // TODO: Change the autogenerated stub
            }

            public function setUp(callable $function): Factory
            {
                $this->bind();
                return parent::setUp($function); // TODO: Change the autogenerated stub
            }

            public function __invoke(Scope $scope)
            {
                try {
                    return $scope->import($this->getClassName());
                } catch (ImportFailureError $e) {
                    $scope = new Composite($scope, Container::new([
                        Resolver::class => function (Scope $scope) {
                            return new Resolver($scope);
                        },
                    ])
                    );
                    return parent::__invoke($scope);
                }
            }
        };
    }

    /**
     * Returns true if the container can return an entry for the given identifier.
     * Returns false otherwise.
     *
     * `has($id)` returning true does not mean that `get($id)` will not throw an exception.
     * It does however mean that `get($id)` will not throw a `NotFoundExceptionInterface`.
     *
     * @param string $id Identifier of the entry to look for.
     *
     * @return bool
     */
    public function has($id): bool
    {
        return class_exists($id);
    }
}